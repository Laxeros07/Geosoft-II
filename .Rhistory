values(DI_mit_NA)
DI_mit_NA <- selectHighest(AOA_klassifikation$DI, 10)
plot(DI_mit_NA, col=cols)
DI_mit_NA <- DI_mit_NA[complete.cases(DI_mit_NA), ]
DI_mit_NA <- selectHighest(AOA_klassifikation$DI, 10)
DI_mit_NA
coords(DI_mit_NA)
DI_mit_NA$coords
DI_mit_NA$DI
coordinates(DI_mit_NA)
?SpatRaster
?SpatRaster
?SpatRaster
zonal(DI_mit_NA)
?SpatRaster-
DI_mit_NA <- selectHighest(AOA_klassifikation$DI, 10)
xyFromCell(DI_mit_NA)
?xyFrom
?xyFromCell
xyFromCell(AOA_klassifikation$DI,DI_mit_NA)
values(DI_mit_NA)
xyFromCell(AOA_klassifikation$DI,values(DI_mit_NA)
?xyFromCell
DI_mit_NA <- values(DI_mit_NA)
xyFromCell(AOA_klassifikation$DI,values(DI_mit_NA))
DI_mit_NA <- DI_mit_NA[complete.cases(DI_mit_NA), ]
?SpatRaster-
DI_mit_NA <- selectHighest(AOA_klassifikation$DI, 10)
DI_mit_NA <- DI_mit_NA[complete.cases(DI_mit_NA), ]
?SpatRaster-
DI_mit_NA <- selectHighest(AOA_klassifikation$DI, 10)
DI_mit_NA <- values(DI_mit_NA)
DI_mit_NA <- DI_mit_NA[complete.cases(DI_mit_NA), ]
DI_mit_NA
?SpatRaster-
DI_mit_NA <- selectHighest(AOA_klassifikation$DI, 10)
plot(DI_mit_NA, col=cols)
?SpatRaster-
DI_mit_NA <- selectHighest(AOA_klassifikation$DI, 10)
plot(DI_mit_NA, col=cols)
?SpatRaster-
DI_mit_NA <- selectHighest(AOA_klassifikation$DI, 10)
DI_mit_NA <- values(DI_mit_NA)
?SpatRaster-
AOA_klassifikation$DI
plot(AOA_klassifikation$DI)
?SpatRaster-
AOA_klassifikation
?SpatRaster-
AOA_klassifikation$DI
?SpatRaster-
AOA_klassifikation
# AOA Berechnungen
AOA_klassifikation <- aoa(rasterdaten,model)
crs(AOA_klassifikation$AOA)<- "+proj=longlat +datum=WGS84 +no_defs +type=crs"
crs(AOA_klassifikation$DI)<- "+proj=longlat +datum=WGS84 +no_defs +type=crs"
plot(AOA_klassifikation$DI)
plot(AOA_klassifikation$AOA)
?SpatRaster-
AOA_klassifikation
?SpatRaster-
plot(AOA_klassifikation)
values(AOA_klassifikation$DI)
values(AOA_klassifikation$DI[1,10])
values(AOA_klassifikation$DI)[1,10]
(values(AOA_klassifikation$DI))[1,10]
erste10 <- AOA_klassifikation$DI[1,10]
values(erste10)
OA_klassifikation$DI
AOA_klassifikation$DI
AOA_klassifikation
AOA_klassifikation$DI
erste10 <- AOA_klassifikation$DI[1,10]
erste10
values(erste10)
DI_mit_NA <- selectHighest(AOA_klassifikation$DI, 10)
DI_mit_NA
plot(AOA_klassifikation$DI)
values(DI_mit_NA)
DI_mit_NA <- DI_mit_NA[complete.cases(DI_mit_NA), ]
DI_mit_NA <- values(DI_mit_NA)
DI_mit_NA
DI_mit_NA <- DI_mit_NA[complete.cases(DI_mit_NA), ]
DI_mit_NA <- selectHighest(AOA_klassifikation$DI, 10)
coordinates(DI_mit_NA)
?SpatRaster-
?freq
?SpatRaster-
?freq
?freq
?freq
?zonal
DI_mit_NA <- selectHighest(AOA_klassifikation$DI, 10)
test <- rasterToPoints(DI_mit_NA)
library(rgdal) # for spTransform
library(gdal) # for spTransform
library(rgdal) # for spTransform
test <- rasterToPoints(DI_mit_NA)
coordinates(DI_mit_NA)
xyFromCell(AOA_klassifikation$DI,10000)
DI_mit_NA <- DI_mit_NA[complete.cases(DI_mit_NA), ]
DI_mit_NA <- values(DI_mit_NA)
DI_mit_NA <- DI_mit_NA[complete.cases(DI_mit_NA), ]
xyFromCell(AOA_klassifikation$DI,DI_mit_NA[1])
DI_mit_NA[1]
xyFromCell(DI_mit_NA,1)
DI_mit_NA <- selectHighest(AOA_klassifikation$DI, 10)
xyFromCell(DI_mit_NA,1)
xyFromCell(AOA_klassifikation$DI,1)
DI_mit_NA <- selectHighest(AOA_klassifikation$DI, 10)
DI_mit_NA
head(DI_mit_NA)
xyFromCell(na.omit(DI_mit_NA,1))
DI_mit_NA <- selectHighest(AOA_klassifikation$DI, 10)
xyFromCell(AOA_klassifikation$DI,1)
xyFromCell(na.omit(DI_mit_NA,1))
xyFromCell(DI_mit_NA,1)
xyFromCell(na.omit(DI_mit_NA),1)
DI_mit_NA <- selectHighest(AOA_klassifikation$DI, 10)
xyFromCell(AOA_klassifikation$DI,1)
xyFromCell(na.omit(DI_mit_NA),1)
DI_mit_NA <- selectHighest(AOA_klassifikation$DI, 10)
xyFromCell(DI_mit_NA,1)
DI_mit_NA <- selectHighest(AOA_klassifikation$DI, 10)
head(DI_mit_NA)
DI_mit_NA <- selectHighest(AOA_klassifikation$DI, 10)
xyFromCell(AOA_klassifikation$DI,1)
xyFromCell(DI_mit_NA,1)
xyFromCell(na.omit(DI_mit_NA),1)
DI_mit_NA
head(DI_mit_NA)
DI_mit_NA <- selectHighest(AOA_klassifikation$DI, 10)
xyFromCell(DI_mit_NA,1)
xyFromCell(DI_mit_NA,2)
xyFromCell(AOA_klassifikation$DI,1)
xyFromCell(AOA_klassifikation$DI,2)
test <- na.omit(DI_mit_NA)
test
head(test)
DI_mit_NA <- values(DI_mit_NA)
test <- na.omit(DI_mit_NA)
head(test)
DI_mit_NA <- selectHighest(AOA_klassifikation$DI, 10)
DI_mit_NA <- values(DI_mit_NA)
test <- na.omit(DI_mit_NA)
head(test)
test
plot(AOA_klassifikation$DI)
DI_mit_NA <- selectHighest(AOA_klassifikation$DI, 1000)
plot(DI_mit_NA, col=cols)
DI_mit_NA <- selectHighest(AOA_klassifikation$DI, 10000)
plot(DI_mit_NA, col=cols)
crs(DI_mit_NA)<- "+proj=longlat +datum=WGS84 +no_defs +type=crs"
terra::writeRaster(DI_mit_NA, paste(
getwd(),
"/public/uploads/DI.tif",
sep = ""
), overwrite = TRUE)
?maxDissim
#saveRDS(model, "C:/Users/Felix/Desktop/Studium/Uni Fächer/4. Semester/Geosoft 1/Geosoft-II/public/uploads/modell.RDS")
saveRDS(model, "myfiles/RFModel2.RDS", overwrite = TRUE)
#saveRDS(model, "C:/Users/Felix/Desktop/Studium/Uni Fächer/4. Semester/Geosoft 1/Geosoft-II/public/uploads/modell.RDS")
saveRDS(model, "C:/Users/Felix/Desktop/Studium/Uni Fächer/4. Semester/Geosoft 1/Geosoft-II/public/uploads/modell.RDS", overwrite = TRUE)
?saveRDS
?saveRDS
#saveRDS(model, "C:/Users/Felix/Desktop/Studium/Uni Fächer/4. Semester/Geosoft 1/Geosoft-II/public/uploads/modell.RDS")
saveRDS(model, "C:/Users/Felix/Desktop/Studium/Uni Fächer/4. Semester/Geosoft 1/Geosoft-II/public/uploads/modell.RDS")
library(cowplot)
install.packages("cowplot")
library(cowplot)
# Prediction Legende exportieren
plot <- ggplot()+
geom_spatraster(data=prediction_terra)+
scale_fill_manual(values=brewer.pal(n = 10, name = "RdBu"))
# zum testen wd so setzen
setwd("C:/Users/Felix/Desktop/Studium/Uni Fächer/4. Semester/Geosoft 1/Geosoft-II")
rasterdaten <- rast(paste(
getwd(),
"/public/uploads/rasterdaten.tif",
sep = ""
))
trainingsdaten <- read_sf(paste(
getwd(),
"/public/uploads/trainingsdaten.geojson",
sep = ""
))
modell <- readRDS(paste(
getwd(),
"/public/uploads/modell.RDS",
sep = ""
))
## Variablen definieren
predictors <- c(
"B02", "B03", "B04", "B08", "B05", "B06", "B07", "B11",
"B12", "B8A"
)
# Trainingsdaten umprojizieren, falls die Daten verschiedene CRS haben
trainingsdaten <- st_transform(trainingsdaten, crs(rasterdaten))
# Daten mergen
extr <<- extract(rasterdaten, trainingsdaten)
# head(extr)
# head(trainingsdaten)
trainingsdaten$PolyID <- 1:nrow(trainingsdaten)
extr <<- merge(extr, trainingsdaten, by.x = "ID", by.y = "PolyID")
# Modell trainieren
# nicht alle Daten verwenden um Rechenzeit zu sparen
extr_subset <- extr[createDataPartition(extr$ID, p = 0.2)$Resample1, ]
# eventuell Daten limitieren.
# Verhälnis der Daten aus jedem Trainingsgebiet soll aber gleich bleiben
# hier:10% aus jedem Trainingsgebiet (see ?createDataPartition)
trainIDs <- createDataPartition(extr$ID, p = 0.1, list = FALSE)
trainDat <- extr[trainIDs, ]
# Sicherstellen das kein NA in Prädiktoren enthalten ist:
trainDat <- trainDat[complete.cases(trainDat[, predictors]), ]
#### Modelltraining
model <- train(trainDat[, predictors],
trainDat$Label,
method = "rf",
importance = TRUE,
ntree = 50
) # 50 is quite small (default=500). But it runs faster.
#saveRDS(model, "C:/Users/Felix/Desktop/Studium/Uni Fächer/4. Semester/Geosoft 1/Geosoft-II/public/uploads/modell.RDS")
saveRDS(model, "C:/Users/Felix/Desktop/Studium/Uni Fächer/4. Semester/Geosoft 1/Geosoft-II/public/uploads/modell.RDS")
# Farbpalette
cols <- c(
"beige", "sandybrown",
"blue3", "red", "magenta", "red", "darkgoldenrod", "lightgreen", "blue", "green", "deeppink4", "grey", "chartreuse", "deeppink3",
"deepskyblue4", "forestgreen", "brown", "darkgreen"
)
# klassifizieren
### little detour due to terra/raster change
prediction <- predict(as(rasterdaten, "Raster"), model)#, colors(cols))
projection(prediction)<- "+proj=longlat +datum=WGS84 +no_defs +type=crs"
prediction_terra <- as(prediction, "SpatRaster")
coltab(prediction_terra) <- cols
# ), bg="transparent")
# plot(NULL ,xaxt='n',yaxt='n',bty='n',ylab='',xlab='', xlim=0:1, ylim=0:1)
# legend("topleft", legend =prediction_terra$names, pch=16, pt.cex=3, cex=1.5, bty='n',
#                      col = cols)
#                      mtext("Species", at=0.2, cex=2)
# dev.off()
# ?terra::plot
# writeRaster(prediction_terra, "D:/Dokumente/Studium/5 FS/Geosoftware II/geosoft-II/public/uploads/prediction.tif", overwrite = TRUE)
# filename <- paste(normalizePath("D:/Dokumente/Studium"), "\\prediction.tif", sep = "")
# stop(getwd())
terra::writeRaster(prediction_terra, paste(
getwd(),
"/public/uploads/prediction.tif",
sep = ""
), overwrite = TRUE)
# Prediction Legende exportieren
plot <- ggplot()+
geom_spatraster(data=prediction_terra)+
scale_fill_manual(values=brewer.pal(n = 10, name = "RdBu"))
# Prediction Legende exportieren
?`geometry,Spatial-method`
# Prediction Legende exportieren
?`geometry,SpatialPixelsDataFrame-method`
plot <- ggplot()+
geom_spatraster(data=prediction_terra)+
scale_fill_manual(values=brewer.pal(n = 10, name = "RdBu"))
install.packages("tidyterra")
library(tidyterra)
plot <- ggplot()+
geom_spatraster(data=prediction_terra)+
scale_fill_manual(values=brewer.pal(n = 10, name = "RdBu"))
install.packages("RColorBrewer")
library(RColorBrewer)
plot <- ggplot()+
geom_spatraster(data=prediction_terra)+
scale_fill_manual(values=brewer.pal(n = 10, name = "RdBu"))
legend <- get_legend(plot)
plot(legend)
plot(legend)plot(prediction)
plot(legend)plot(prediction_terra)
plot(prediction_terra)
plot(legend)
plot(plot)
coltab(prediction_terra) <- brewer.pal(n = 10, name = "RdBu")
plot(prediction_terra)
plot(plot)
plot(prediction_terra)
plot(legend)
# Prediction Legende exportieren
plot <- ggplot()+
geom_spatraster(data=prediction_terra)
#scale_fill_manual(values=brewer.pal(n = 10, name = "RdBu"))
legend <- get_legend(plot)
plot(legend)
plot(plot)
plot(prediction_terra)
#scale_fill_manual(values=brewer.pal(n = 10, name = "RdBu"))
coltab(plot) <- brewer.pal(n = 10, name = "RdBu")
# Prediction Legende exportieren
plot <- ggplot()+
geom_spatraster(data=prediction_terra)
legend <- get_legend(plot)
plot(prediction_terra)
plot(legend)
# Prediction Legende exportieren
plot <- ggplot()+
geom_spatraster(data=prediction_terra)+
scale_fill_manual(values=brewer.pal(n = 10, name = "RdBu"))
legend <- get_legend(plot)
plot(prediction_terra)
plot(legend)
plot(plot)
plot(prediction_terra)
plot(plot)
# Prediction Legende exportieren
plot <- ggplot()+
geom_spatraster(data=prediction_terra)+
scoltab(prediction_terra)
# Prediction Legende exportieren
plot <- ggplot()+
geom_spatraster(data=prediction_terra)+
coltab(prediction_terra)
legend <- get_legend(plot)
plot(legend)
plot(plot)
plot(prediction_terra)
coltab(prediction_terra) <- brewer.pal(n = 10, name = "RdBu")
# Prediction Legende exportieren
plot <- ggplot()+
geom_spatraster(data=prediction_terra)+
coltab(prediction_terra)
legend <- get_legend(plot)
plot(legend)
# Prediction Legende exportieren
plot <- ggplot()+
geom_spatraster(data=prediction_terra)+
scale_fill_manual(values=coltab(prediction_terra))
legend <- get_legend(plot)
plot(legend)
plot(plot)
# Prediction Legende exportieren
plot <- ggplot()+
geom_spatraster(data=prediction_terra)+
scale_fill_manual(coltab(prediction_terra))
legend <- get_legend(plot)
# Prediction Legende exportieren
plot <- ggplot()+
geom_spatraster(data=prediction_terra)+
scale_fill_manual(values=brewer.pal(n = 10, name = "RdBu"))
legend <- get_legend(plot)
plot(legend)
plot(plot)
plot(prediction_terra)
plot(plot)
# ), bg="transparent")
# plot(NULL ,xaxt='n',yaxt='n',bty='n',ylab='',xlab='', xlim=0:1, ylim=0:1)
# legend("topleft", legend =prediction_terra$names, pch=16, pt.cex=3, cex=1.5, bty='n',
#                      col = cols)
#                      mtext("Species", at=0.2, cex=2)
# dev.off()
# ?terra::plot
# writeRaster(prediction_terra, "D:/Dokumente/Studium/5 FS/Geosoftware II/geosoft-II/public/uploads/prediction.tif", overwrite = TRUE)
# filename <- paste(normalizePath("D:/Dokumente/Studium"), "\\prediction.tif", sep = "")
# stop(getwd())
terra::writeRaster(plot, paste(
getwd(),
"/public/uploads/prediction.tif",
sep = ""
), overwrite = TRUE)
prediction_terra <- as(prediction, "SpatRaster")
# Prediction Legende exportieren
plot <- ggplot()+
geom_spatraster(data=prediction_terra)#+
legend <- get_legend(plot)
plot(legend)
coltab(prediction_terra) <- brewer.pal(n = 10, name = "RdBu")
# Prediction Legende exportieren
plot <- ggplot()+
geom_spatraster(data=prediction_terra)#+
legend <- get_legend(plot)
plot(legend)
# Prediction Legende exportieren
?scale_fill_manual
plot(prediction_terra)
plot(legend)
plot <- ggplot()+
geom_spatraster(data=prediction_terra)#+
legend <- get_legend(plot)
plot <- ggplot()+
geom_spatraster(data=prediction_terra)+
scale_fill_manual(values=brewer.pal(n = 10, name = "RdBu"), na.value=NA)
legend <- get_legend(plot)
plot(legend)
plot(plot)
plot(prediction_terra)
coltab(prediction_terra) <- scale_fill_manual(values=brewer.pal(n = 10, name = "RdBu"), na.value=NA)
coltab(prediction_terra) <- brewer.pal(n = 10, name = "RdBu")
plot(prediction_terra)
plot(legend)
plot(prediction_terra)
plot(legend)
plot(plot)
plot(prediction_terra)
plot(plot)
plot(prediction_terra)
plot(plot)
plot(prediction_terra)
plot(legend, add=TRUE)
plot(prediction_terra)
plot(legend, add=TRUE)
plot(legend)
plot(prediction_terra)
plot(legend)
plot(plot)
plot(prediction_terra)
plot(plot)
plot(prediction_terra)
plot(plot)
plot(prediction_terra)
plot(plot)
plot(prediction_terra)
plot(plot)
plot(prediction_terra)
plot(legend)
plot(prediction_terra)
# Prediction Legende exportieren
legend_plot <- ggplot()+
geom_spatraster(data=prediction_terra)+
scale_fill_manual(values=brewer.pal(n = 10, name = "RdBu"), na.value=NA)
legend <- get_legend(legend_plot)
terra::writeRaster(legend, paste(
getwd(),
"/public/uploads/legend.tif",
sep = ""
), overwrite = TRUE)
?exportpng
?export
?exportRGB
tiff(legend, paste(
getwd(),
"/public/uploads/legend.tif",
sep = ""
), overwrite = TRUE)
tiff(legend, paste(
getwd(),
"/public/uploads/legend.tif",
sep = ""
))
save.image(legend, paste(
getwd(),
"/public/uploads/legend.tif",
sep = ""
))
save.image(paste(
getwd(),
"/public/uploads/legend.tif",
sep = ""
))
unlink("/public/uploads/legend.tif.RData")
save.image(paste(
getwd(),
"/public/uploads/legend",
sep = ""
))
save.image(paste(
getwd(),
"/public/uploads/legend.RData",
sep = ""
))
save.image(paste(
getwd(),
"/public/uploads/legend.png",
sep = ""
))
# Prediction Legende exportieren
legend_plot <- ggplot()+
geom_spatraster(data=prediction_terra)+
scale_fill_manual(values=brewer.pal(n = 10, name = "RdBu"), na.value=NA)
legend <- get_legend(legend_plot)
savePlot(paste(
getwd(),
"/public/uploads/legend",
sep = ""
), type="png")
savePlot(paste(
getwd(),
"/public/uploads/legend.png",
sep = ""
), type="png")
savePlot(paste(
getwd(),
"/public/uploads/legend.png",
sep = ""
))
plot(legend)
plot(legend_plot)
savePlot(paste(
getwd(),
"/public/uploads/legend.png",
sep = ""
))
plot(legend)
savePlot(paste(
getwd(),
"/public/uploads/legend.png",
sep = ""
))
# Prediction Legende exportieren
legend_plot <- ggplot()+
geom_spatraster(data=prediction_terra)+
scale_fill_manual(values=brewer.pal(n = 10, name = "RdBu"), na.value=NA)
legend <- get_legend(legend_plot)
ggsave(paste(
getwd(),
"/public/uploads/legend.png",
sep = ""
), plot= legend)
