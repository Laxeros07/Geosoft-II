## Ausgabe
klassifizierung_mit_Modell = function(rasterdaten, modell) {
#klassifizieren
###little detour due to terra/raster change
prediction <- predict(as(rasterdaten,"Raster"),modell)
prediction_terra <- as(prediction,"SpatRaster")
# erste Visualisierung der Klassifikation:
#plot(prediction_terra)
# und nochmal in schöner plotten mit sinnvollen Farben
cols <- c( "lightgreen","blue", "green","darkred","forestgreen",
"darkgreen","beige","darkblue"," firebrick1","red","yellow")
#plot(prediction_terra,col=cols)
# export raster
#writeRaster(prediction_terra,"prediction.grd",overwrite=TRUE)
return (plot(prediction_terra))#,col=cols))
}
## Ausgabe
klassifizierung_ohne_Modell = function(rasterdaten, trainingsdaten) {
##Variablen definieren
predictors <- c("B02","B03","B04","B08","B05","B06","B07","B11",
"B12","B8A")
# Trainingsdaten umprojizieren, falls die Daten verschiedene CRS haben
trainingsdaten <- st_transform(trainingsdaten, crs(rasterdaten))
# Daten mergen
extr <<- extract(rasterdaten,trainingsdaten)
#head(extr)
#head(trainingsdaten)
trainingsdaten$PolyID <- 1:nrow(trainingsdaten)
extr <<- merge(extr,trainingsdaten,by.x="ID",by.y="PolyID")
#head(extr)
# Modell trainieren
#nicht alle Daten verwenden um Rechenzeit zu sparen
extr_subset <- extr[createDataPartition(extr$ID,p=0.2)$Resample1,]
#eventuell Daten limitieren.
#Verhälnis der Daten aus jedem Trainingsgebiet soll aber gleich bleiben
# hier:10% aus jedem Trainingsgebiet (see ?createDataPartition)
trainIDs <- createDataPartition(extr$ID,p=0.1,list = FALSE)
trainDat <- extr[trainIDs,]
#Sicherstellen das kein NA in Prädiktoren enthalten ist:
trainDat <- trainDat[complete.cases(trainDat[,predictors]),]
#### Modelltraining
model <- train(trainDat[,predictors],
trainDat$Label,
method="rf",
importance=TRUE,
ntree=50) # 50 is quite small (default=500). But it runs faster.
#saveRDS(model, "C:/Users/Felix/Desktop/Studium/Uni Fächer/4. Semester/Geosoft 1/Geosoft-II/public/beispieldaten/RFModel2.RDS")
#model
#plot(model) # see tuning results
#plot(varImp(model)) # variablenwichtigkeit
#klassifizieren
###little detour due to terra/raster change
prediction <- predict(as(rasterdaten,"Raster"),model)
prediction_terra <- as(prediction,"SpatRaster")
# erste Visualisierung der Klassifikation:
#plot(prediction_terra)
# und nochmal in schöner plotten mit sinnvollen Farben
cols <- c( "lightgreen","blue", "green","darkred","forestgreen",
"darkgreen","beige","darkblue"," firebrick1","red","yellow")
#plot(prediction_terra,col=cols)
# export raster
#writeRaster(prediction_terra,"prediction.grd",overwrite=TRUE)
return (plot(prediction_terra))#,col=cols))
}
# zum Testen der Funktionen
klassifizierung_mit_Modell(rasterdaten, modell)
klassifizierung_ohne_Modell(rasterdaten, trainingsdaten)
library(sf)
# zum Testen
geopackage <- st_read("C:/Users/Felix/Desktop/Studium/Uni Fächer/4. Semester/Geosoft 1/Geosoft-II/public/beispieldaten/trainingsgebiete.gpkg")
konvertierung = function(geopackageEingabe) {
data <- st_read(geopackageEingabe)
st_write(data, "temporaererDatenspeicher/data.geojson")
neu <- st_read("temporaererDatenspeicher/data.geojson")
return (neu)
}
# zum Testen
konvertierung(geopackage)
data <- st_read(geopackage)
# zum Testen
geopackage <- st_read("C:/Users/Felix/Desktop/Studium/Uni Fächer/4. Semester/Geosoft 1/Geosoft-II/public/beispieldaten/trainingsgebiete.gpkg")
konvertierung = function(geopackageEingabe) {
data <- st_read(geopackageEingabe)
st_write(data, "temporaererDatenspeicher/data.geojson")
neu <- st_read("temporaererDatenspeicher/data.geojson")
return (neu)
}
# zum Testen
konvertierung(geopackage)
konvertierung = function(geopackageEingabe) {
data <- st_read(geopackageEingabe)
st_write(data, "C:/Users/Felix/Desktop/Studium/Uni Fächer/4. Semester/Geosoft 1/Geosoft-II/public//data.geojson")
neu <- st_read("C:/Users/Felix/Desktop/Studium/Uni Fächer/4. Semester/Geosoft 1/Geosoft-II/public//data.geojson")
return (neu)
}
# zum Testen
konvertierung(geopackage)
konvertierung = function(geopackageEingabe) {
data <- st_read(geopackageEingabe)
st_write(data, "C:/Users/Felix/Desktop/Studium/Uni Fächer/4. Semester/Geosoft 1/Geosoft-II/public/data.geojson")
neu <- st_read("C:/Users/Felix/Desktop/Studium/Uni Fächer/4. Semester/Geosoft 1/Geosoft-II/public/data.geojson")
return (neu)
}
# zum Testen
konvertierung(geopackage)
# zum Testen
geopackage <- st_read("C:/Users/Felix/Desktop/Studium/Uni Fächer/4. Semester/Geosoft 1/Geosoft-II/public/beispieldaten/trainingsgebiete.gpkg")
konvertierung = function(geopackageEingabe) {
data <- st_read(geopackageEingabe)
st_write(data, "C:/Users/Felix/Desktop/Studium/Uni Fächer/4. Semester/Geosoft 1/Geosoft-II/public/uploads/data.geojson")
neu <- st_read("C:/Users/Felix/Desktop/Studium/Uni Fächer/4. Semester/Geosoft 1/Geosoft-II/public/uploads/data.geojson")
return (neu)
}
# zum Testen
konvertierung(geopackage)
konvertierung = function(geopackageEingabe) {
data <- st_read(geopackageEingabe)
st_write(data, "C:/Users/Felix/Desktop/data.geojson")
neu <- st_read("C:/Users/Felix/Desktop/data.geojson")
return (neu)
}
# zum Testen
konvertierung(geopackage)
# zum Testen
geopackage <- st_read("C:/Users/Felix/Desktop/Studium/Uni Fächer/4. Semester/Geosoft 1/Geosoft-II/public/beispieldaten/trainingsgebiete.gpkg")
konvertierung = function(geopackageEingabe) {
st_write(geopackageEingabe, "C:/Users/Felix/Desktop/Studium/Uni Fächer/4. Semester/Geosoft 1/Geosoft-II/public/uploads/data.geojson")
neu <- st_read("C:/Users/Felix/Desktop/Studium/Uni Fächer/4. Semester/Geosoft 1/Geosoft-II/public/uploads/data.geojson")
return (neu)
}
# zum Testen
konvertierung(geopackage)
pfad <- getwd()
pfad
## librarys installieren
library(terra)
library(sf)
library(caret)
library(raster)
library(CAST)
library(cowplot)
library(tidyterra)
library(RColorBrewer)
# zum testen wd so setzen
setwd("C:/Users/Felix/Desktop/Studium/Uni Fächer/4. Semester/Geosoft 1/Geosoft-II")
rasterdaten <- rast(paste(
getwd(),
"/public/uploads/rasterdaten.tif",
sep = ""
))
trainingsdaten <- read_sf(paste(
getwd(),
"/public/uploads/trainingsdaten.geojson",
sep = ""
))
modell <- readRDS(paste(
getwd(),
"/public/uploads/modell.RDS",
sep = ""
))
trainingsdaten
?as.polygons
baumAnzahl <- NA
baumTiefe <- NA
## Variablen definieren
predictors <- c(
"B02", "B03", "B04", "B05", "B06", "B07", "B08", "B8A", "B09", "B10", "B11", "B12")
# Trainingsdaten umprojizieren, falls die Daten verschiedene CRS haben
trainingsdaten <- st_transform(trainingsdaten, crs(rasterdaten))
# Daten mergen
extr <<- extract(rasterdaten, trainingsdaten)
# head(extr)
# head(trainingsdaten)
trainingsdaten$PolyID <- 1:nrow(trainingsdaten)
extr <<- merge(extr, trainingsdaten, by.x = "ID", by.y = "PolyID")
# Modell trainieren
# nicht alle Daten verwenden um Rechenzeit zu sparen
extr_subset <- extr[createDataPartition(extr$ID, p = 0.2)$Resample1, ]
# eventuell Daten limitieren.
# Verhälnis der Daten aus jedem Trainingsgebiet soll aber gleich bleiben
# hier:10% aus jedem Trainingsgebiet (see ?createDataPartition)
trainIDs <- createDataPartition(extr$ID, p = 0.1, list = FALSE)
trainDat <- extr[trainIDs, ]
# Sicherstellen das kein NA in Prädiktoren enthalten ist:
trainDat <- trainDat[complete.cases(trainDat[, predictors]), ]
# Hyperparameter für Modelltraining abfragen
if(is.na(baumAnzahl)){
baumAnzahl <- 50
}
if(is.na(baumTiefe)){
baumTiefe <- 100
}
#### Modelltraining
model <- train(trainDat[, predictors],
trainDat$Label,
method = "rf",
importance = TRUE,
ntree = baumAnzahl,  # Anzahl der Bäume
maxnodes = baumTiefe   # Tiefe der Bäume
) # 50 is quite small (default=500). But it runs faster.
# klassifizieren
### little detour due to terra/raster change
prediction <- predict(as(rasterdaten, "Raster"), model)#, colors(cols))
projection(prediction)<- "+proj=longlat +datum=WGS84 +no_defs +type=crs"
prediction_terra <- as(prediction, "SpatRaster")
farben <- brewer.pal(n = 12, name = "Paired")
coltab(prediction_terra) <- farben#[0:10]
# Prediction Legende exportieren
legend_plot <- ggplot()+
geom_spatraster(data=prediction_terra)+
scale_fill_manual(values=farben[2:12], na.value=NA)
legend <- get_legend(legend_plot)
# Abfrage, ob bereits eine AOA gerechnet wurde
AOA_Differenz_nötig <- FALSE
if(file.exists(paste(
getwd(),
"/public/uploads/AOA_klassifikation.tif",
sep = ""
))){
AOA_Differenz_nötig <- TRUE
AOA_klassifikation_alt<- rast(paste(
getwd(),
"/public/uploads/AOA_klassifikation.tif",
sep = ""
))
}
# AOA Berechnungen
AOA_klassifikation <- aoa(rasterdaten,model)
crs(AOA_klassifikation$AOA)<- "+proj=longlat +datum=WGS84 +no_defs +type=crs"
crs(AOA_klassifikation$DI)<- "+proj=longlat +datum=WGS84 +no_defs +type=crs"
# DI Berechnungen
maxDI <- selectHighest(AOA_klassifikation$DI, 3000)
crs(maxDI)<- "+proj=longlat +datum=WGS84 +no_defs +type=crs"
test <- as.polygons(maxDI)
test
plot(test)
?`writeVector,SpatVector,character-method`
maxDIVector <- as.polygons(maxDI)
terra::writeVector(maxDIVector, paste(
getwd(),
"/public/uploads/maxDI.geojson",
sep = ""
), overwrite = TRUE)
terra::writeVector(maxDIVector, paste(
getwd(),
"/public/uploads/maxDI.geojson",
sep = ""
), filetype="geojson", overwrite = TRUE)
crs(maxDIVector)<- "+proj=longlat +datum=WGS84 +no_defs +type=crs"
terra::writeVector(maxDIVector, paste(
getwd(),
"/public/uploads/maxDI.geojson",
sep = ""
), filetype="geojson", overwrite = TRUE)
terra::writeVector(maxDIVector, paste(
getwd(),
"/public/uploads/maxDI.geojson",
sep = ""
), filetype="geojson", overwrite = TRUE)
# zum testen wd so setzen
setwd("C:/Users/Felix/Desktop/Studium/Uni Fächer/4. Semester/Geosoft 1/Geosoft-II")
rasterdaten <- rast(paste(
getwd(),
"/public/uploads/rasterdaten.tif",
sep = ""
))
trainingsdaten <- read_sf(paste(
getwd(),
"/public/uploads/trainingsdaten.geojson",
sep = ""
))
modell <- readRDS(paste(
getwd(),
"/public/uploads/modell.RDS",
sep = ""
))
maske_raster <- c(7.55738996178022, 7.64064656833175, 51.9372943715445, 52.0001517816852)
maske_training <- c(xmin =7.55738996178022, ymin =51.9372943715445, xmax =7.64064656833175, ymax =52.0001517816852)
baumAnzahl <- NA
baumTiefe <- NA
algorithmus <- "rf"
## Variablen definieren
predictors <- c(
"B02", "B03", "B04", "B05", "B06", "B07", "B08", "B8A", "B09", "B10", "B11", "B12")
# Rasterdaten zuschneiden
rasterdaten <- crop(rasterdaten, maske_raster)
# Trainingsdaten zuschneiden
class(maske_raster) <- "numeric"
#class(maske_raster)
#plot(ext(maske_training))
sf_use_s2(FALSE)
trainingsdaten2 <- st_make_valid(trainingsdaten)
trainingsdaten <- st_crop(trainingsdaten2, ext(maske_training))
plot(trainingsdaten)
# Trainingsdaten umprojizieren, falls die Daten verschiedene CRS haben
trainingsdaten <- st_transform(trainingsdaten, crs(rasterdaten))
# Daten mergen
extr <<- extract(rasterdaten, trainingsdaten)
# head(extr)
# head(trainingsdaten)
trainingsdaten$PolyID <- 1:nrow(trainingsdaten)
extr <<- merge(extr, trainingsdaten, by.x = "ID", by.y = "PolyID")
head(extr)
# Modell trainieren
# nicht alle Daten verwenden um Rechenzeit zu sparen
extr_subset <- extr[createDataPartition(extr$ID, p = 0.2)$Resample1, ]
head(extr_subset)
# eventuell Daten limitieren.
# Verhälnis der Daten aus jedem Trainingsgebiet soll aber gleich bleiben
# hier:10% aus jedem Trainingsgebiet (see ?createDataPartition)
trainIDs <- createDataPartition(extr$ID, p = 0.1, list = FALSE)
trainIDs
trainDat <- extr[trainIDs, ]
trainDat
head(trainDat)
# eventuell Daten limitieren.
# Verhälnis der Daten aus jedem Trainingsgebiet soll aber gleich bleiben
# hier:10% aus jedem Trainingsgebiet (see ?createDataPartition)
# trainIDs <- createDataPartition(extr$ID, p = 0.1, list = FALSE)
# trainDat <- extr[trainIDs, ]
# Sicherstellen das kein NA in Prädiktoren enthalten ist:
trainDat <- extr[complete.cases(extr[, predictors]), ]
trainDat
if(algorithmus == "rf") {
# Hyperparameter für Modelltraining abfragen
if(is.na(baumAnzahl)){
baumAnzahl <- 50
}
if(is.na(baumTiefe)){
baumTiefe <- 100
}
#### Modelltraining
model <- train(trainDat[, predictors],
trainDat$Label,
method = "rf",
importance = TRUE,
ntree = baumAnzahl,  # Anzahl der Bäume
maxnodes = baumTiefe   # Tiefe der Bäume
) # 50 is quite small (default=500). But it runs faster.
} else {
model <- train(trainDat[, predictors],
trainDat$Label,
method="rpart",
trControl = trainControl(method = "cv")   # Classification Tree Algorithmus
) # nicht so gut wie rf Algorithmus
}
# klassifizieren
### little detour due to terra/raster change
prediction <- predict(as(rasterdaten, "Raster"), model)#, colors(cols))
projection(prediction)<- "+proj=longlat +datum=WGS84 +no_defs +type=crs"
prediction_terra <- as(prediction, "SpatRaster")
algorithmus <- "dt"
if(algorithmus == "rf") {
# Hyperparameter für Modelltraining abfragen
if(is.na(baumAnzahl)){
baumAnzahl <- 50
}
if(is.na(baumTiefe)){
baumTiefe <- 100
}
#### Modelltraining
model <- train(trainDat[, predictors],
trainDat$Label,
method = "rf",
importance = TRUE,
ntree = baumAnzahl,  # Anzahl der Bäume
maxnodes = baumTiefe   # Tiefe der Bäume
) # 50 is quite small (default=500). But it runs faster.
} else {
model <- train(trainDat[, predictors],
trainDat$Label,
method="rpart",
trControl = trainControl(method = "cv")   # Classification Tree Algorithmus
) # nicht so gut wie rf Algorithmus
}
# klassifizieren
### little detour due to terra/raster change
prediction <- predict(as(rasterdaten, "Raster"), model)#, colors(cols))
projection(prediction)<- "+proj=longlat +datum=WGS84 +no_defs +type=crs"
prediction_terra <- as(prediction, "SpatRaster")
farben <- brewer.pal(n = 12, name = "Paired")
coltab(prediction_terra) <- farben#[0:10]
plot(prediction_terra)
model <- train(trainDat[, predictors],
trainDat$Label,
method="rpart",
trControl = trainControl(method = "cv")   # Classification Tree Algorithmus
) # nicht so gut wie rf Algorithmus
#### Modelltraining
model <- train(trainDat[, predictors],
trainDat$Label,
method = "rf",
importance = TRUE,
ntree = baumAnzahl,  # Anzahl der Bäume
maxnodes = baumTiefe   # Tiefe der Bäume
) # 50 is quite small (default=500). But it runs faster.
# zum testen wd so setzen
setwd("C:/Users/Felix/Desktop/Studium/Uni Fächer/4. Semester/Geosoft 1/Geosoft-II")
rasterdaten <- rast(paste(
getwd(),
"/public/uploads/rasterdaten.tif",
sep = ""
))
trainingsdaten <- read_sf(paste(
getwd(),
"/public/uploads/trainingsdaten.geojson",
sep = ""
))
modell <- readRDS(paste(
getwd(),
"/public/uploads/modell.RDS",
sep = ""
))
plot(rasterdaten)
plot(rasterdaten$B02)
plot(trainingsdaten, add=TRUE)
maske_raster <- c(7.55738996178022, 7.64064656833175, 51.9372943715445, 52.0001517816852)
plot(maske_raster, add=TRUE)
maske_training <- c(xmin =7.55738996178022, ymin =51.9372943715445, xmax =7.64064656833175, ymax =52.0001517816852)
plot(maske_training, add=TRUE)
plot(maske_training)#, add=TRUE)
mask <- rast(maske_raster)
plot(rasterdaten$B02)
plot(trainingsdaten, add=TRUE)
plot(ext(trainingsdaten), add=TRUE)
rasterdaten <- rast("C:/Users/Felix/Desktop/richtKanal")
rasterdaten <- rast("C:/Users/Felix/Desktop/richtKanal.tif")
plot(rasterdaten$B02)
plot(trainingsdaten, add=TRUE)
plot(ext(trainingsdaten), add=TRUE)
trainingsdaten <- read_sf(paste(
getwd(),
"/public/uploads/trainingsdaten.geojson",
sep = ""
))
plot(trainingsdaten, add=TRUE)
plot(ext(trainingsdaten), add=TRUE)
rasterdat <- crop(rasterdaten, ext(trainingsdaten))
rasterdaten <- rast("C:/Users/Felix/Desktop/umproj.tif")
plot(rasterdaten$B02)
plot(trainingsdaten, add=TRUE)
plot(ext(trainingsdaten), add=TRUE)
ext(trainingsdaten)
maske_raster <- c(7.53978215928766, 7.65980007908203, 51.9182342244001, 52.0182723261705)
maske_raster <- c(7.53978215928766, 7.65980007908203, 51.9182342244001, 52.0182723261705)
rasterdat <- crop(rasterdaten, maske_raster)
plot(rasterdat)
plot(rasterdat$B02)
plot(trainingsdaten, add=TRUE)
plot(ext(trainingsdaten), add=TRUE)
terra::writeRaster(rasterdat, paste(
getwd(),
"/public/uploads/rasterdaten.tif",
sep = ""
), overwrite = TRUE)
terra::writeRaster(rasterdat, paste(
getwd(),
"/public/uploads/rasterdaten.tif",
sep = ""
), overwrite = TRUE)
terra::writeRaster(rasterdat, paste(
getwd(),
"/public/uploads/rasterdaten.tif",
sep = ""
), overwrite = TRUE)
terra::writeRaster(rasterdat, paste(
getwd(),
"/public/uploads/rasterdaten.tif",
sep = ""
), overwrite = TRUE)
# zum testen wd so setzen
setwd("C:/Users/Felix/Desktop/Studium/Uni Fächer/4. Semester/Geosoft 1/Geosoft-II")
terra::writeRaster(rasterdat, paste(
getwd(),
"/public/uploads/rasterdaten.tif",
sep = ""
), overwrite = TRUE)
# zum testen wd so setzen
setwd("C:/Users/Felix/Desktop/Studium/Uni Fächer/4. Semester/Geosoft 1/Geosoft-II")
rasterdaten <- rast("C:/Users/Felix/Desktop/umproj.tif")
trainingsdaten <- read_sf(paste(
getwd(),
"/public/uploads/trainingsdaten.geojson",
sep = ""
))
maske_raster <- c(7.53978215928766, 7.65980007908203, 51.9182342244001, 52.0182723261705)
rasterdat <- crop(rasterdaten, maske_raster)
terra::writeRaster(rasterdat, paste(
getwd(),
"/public/uploads/rasterdaten.tif",
sep = ""
), overwrite = TRUE)
terra::writeRaster(rasterdat, paste(
getwd(),
"/public/uploads/rasterdaten.tif",
sep = ""
), overwrite = TRUE)
terra::writeRaster(rasterdat, paste(
getwd(),
"/public/uploads/rasterdaten.tif",
sep = ""
), overwrite = TRUE)
plot(rasterdaten$B02)
plot(trainingsdaten, add=TRUE)
plot(rasterdat$B02)
plot(trainingsdaten, add=TRUE)
plot(ext(trainingsdaten), add=TRUE)
terra::writeRaster(rasterdat, paste(
getwd(),
"/public/uploads/rasterdaten.tif",
sep = ""
), overwrite = TRUE)
